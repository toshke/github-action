'use strict';

const logger = require('./logger')();
const index = require('..');
const fs = require('fs')

function handleInput(input, cb, userOptions) {
  logger.debug(input);
  logger.debug(`user options ${userOptions}`);
  index.getOptions((err, options) => {
    if (err) {
      logger.error('error from getOptions');
      cb(err);
      return;
    }
    console.log(`Options:`, JSON.stringify(options))

    logger.debug(options);
    console.log(`Using file with format ${input.format}`);
    if (input.format == 'lcov') {
      index.convertLcovToCoveralls(input.file, options, (err, postData) => {
        if (err) {
          logger.error('error from convertLcovToCoveralls');
          cb(err);
          return;
        }

        logger.info('sending this to coveralls.io: ', JSON.stringify(postData));
        index.sendToCoveralls(postData, (err, response, body) => {
          if (err) {
            cb(err);
            return;
          }

          if (response.statusCode >= 400) {
            cb(`Bad response: ${response.statusCode} ${body}`);
            return;
          }

          logger.debug(response.statusCode);
          logger.debug(body);
          cb(null, body);
        });
      });
    }

    if (input.format == 'coveralls') {
        console.log(`Using coveralls format`);
        const postData = input.file; 
        index.sendToCoveralls(postData, (err, response, body) => {
          console.log(`Status from coveralls: ${response.statusCode} Body: ${body}`)
          if (err) {
            cb(err);
            return;
          }
          
          if (response.statusCode >= 400) {
            cb(`Bad response: ${response.statusCode} ${body}`);
            return;
          }

          logger.debug(response.statusCode);
          logger.debug(body);
          cb(null, body);
        });
    }

  }, userOptions);
}

module.exports = handleInput;
